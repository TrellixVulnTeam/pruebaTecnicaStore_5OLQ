{"version":3,"file":"menu-controller.d.ts","sources":["menu-controller.d.ts"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["export declare class MenuController {\r\n    /**\r\n     * Programmatically open the Menu.\r\n     * @param [menuId]  Optionally get the menu by its id, or side.\r\n     * @return returns a promise when the menu is fully opened\r\n     */\r\n    open(menuId?: string): Promise<boolean>;\r\n    /**\r\n     * Programmatically close the Menu. If no `menuId` is given as the first\r\n     * argument then it'll close any menu which is open. If a `menuId`\r\n     * is given then it'll close that exact menu.\r\n     * @param [menuId]  Optionally get the menu by its id, or side.\r\n     * @return returns a promise when the menu is fully closed\r\n     */\r\n    close(menuId?: string): Promise<boolean>;\r\n    /**\r\n     * Toggle the menu. If it's closed, it will open, and if opened, it\r\n     * will close.\r\n     * @param [menuId]  Optionally get the menu by its id, or side.\r\n     * @return returns a promise when the menu has been toggled\r\n     */\r\n    toggle(menuId?: string): Promise<boolean>;\r\n    /**\r\n     * Used to enable or disable a menu. For example, there could be multiple\r\n     * left menus, but only one of them should be able to be opened at the same\r\n     * time. If there are multiple menus on the same side, then enabling one menu\r\n     * will also automatically disable all the others that are on the same side.\r\n     * @param [menuId]  Optionally get the menu by its id, or side.\r\n     * @return Returns the instance of the menu, which is useful for chaining.\r\n     */\r\n    enable(shouldEnable: boolean, menuId?: string): Promise<HTMLIonMenuElement>;\r\n    /**\r\n     * Used to enable or disable the ability to swipe open the menu.\r\n     * @param shouldEnable  True if it should be swipe-able, false if not.\r\n     * @param [menuId]  Optionally get the menu by its id, or side.\r\n     * @return Returns the instance of the menu, which is useful for chaining.\r\n     */\r\n    swipeGesture(shouldEnable: boolean, menuId?: string): Promise<HTMLIonMenuElement>;\r\n    /**\r\n     * @param [menuId] Optionally get the menu by its id, or side.\r\n     * @return Returns true if the specified menu is currently open, otherwise false.\r\n     * If the menuId is not specified, it returns true if ANY menu is currenly open.\r\n     */\r\n    isOpen(menuId?: string): Promise<boolean>;\r\n    /**\r\n     * @param [menuId]  Optionally get the menu by its id, or side.\r\n     * @return Returns true if the menu is currently enabled, otherwise false.\r\n     */\r\n    isEnabled(menuId?: string): Promise<boolean>;\r\n    /**\r\n     * Used to get a menu instance. If a `menuId` is not provided then it'll\r\n     * return the first menu found. If a `menuId` is `left` or `right`, then\r\n     * it'll return the enabled menu on that side. Otherwise, if a `menuId` is\r\n     * provided, then it'll try to find the menu using the menu's `id`\r\n     * property. If a menu is not found then it'll return `null`.\r\n     * @param [menuId]  Optionally get the menu by its id, or side.\r\n     * @return Returns the instance of the menu if found, otherwise `null`.\r\n     */\r\n    get(menuId?: string): Promise<HTMLIonMenuElement>;\r\n    /**\r\n     * @return Returns the instance of the menu already opened, otherwise `null`.\r\n     */\r\n    getOpen(): Promise<HTMLIonMenuElement>;\r\n    /**\r\n     * @return Returns an array of all menu instances.\r\n     */\r\n    getMenus(): Promise<HTMLIonMenuElement[]>;\r\n}\r\n"]}