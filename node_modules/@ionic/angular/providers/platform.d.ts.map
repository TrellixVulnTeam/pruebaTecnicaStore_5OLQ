{"version":3,"file":"platform.d.ts","sources":["platform.d.ts"],"names":[],"mappingssourcesContent":["import { NgZone } from '@angular/core';\r\nimport { BackButtonEventDetail, Platforms } from '@ionic/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nexport interface BackButtonEmitter extends Subject<BackButtonEventDetail> {\r\n    subscribeWithPriority(priority: number, callback: (processNextHandler: () => void) => Promise<any> | void): Subscription;\r\n}\r\nexport declare class Platform {\r\n    private doc;\r\n    private _readyPromise;\r\n    private win;\r\n    /**\r\n     * @hidden\r\n     */\r\n    backButton: BackButtonEmitter;\r\n    /**\r\n     * The keyboardDidShow event emits when the\r\n     * on-screen keyboard is presented.\r\n     */\r\n    keyboardDidShow: any;\r\n    /**\r\n     * The keyboardDidHide event emits when the\r\n     * on-screen keyboard is hidden.\r\n     */\r\n    keyboardDidHide: Subject<void>;\r\n    /**\r\n     * The pause event emits when the native platform puts the application\r\n     * into the background, typically when the user switches to a different\r\n     * application. This event would emit when a Cordova app is put into\r\n     * the background, however, it would not fire on a standard web browser.\r\n     */\r\n    pause: Subject<void>;\r\n    /**\r\n     * The resume event emits when the native platform pulls the application\r\n     * out from the background. This event would emit when a Cordova app comes\r\n     * out from the background, however, it would not fire on a standard web browser.\r\n     */\r\n    resume: Subject<void>;\r\n    /**\r\n     * The resize event emits when the browser window has changed dimensions. This\r\n     * could be from a browser window being physically resized, or from a device\r\n     * changing orientation.\r\n     */\r\n    resize: Subject<void>;\r\n    constructor(doc: any, zone: NgZone);\r\n    /**\r\n     * @returns returns true/false based on platform.\r\n     * @description\r\n     * Depending on the platform the user is on, `is(platformName)` will\r\n     * return `true` or `false`. Note that the same app can return `true`\r\n     * for more than one platform name. For example, an app running from\r\n     * an iPad would return `true` for the platform names: `mobile`,\r\n     * `ios`, `ipad`, and `tablet`. Additionally, if the app was running\r\n     * from Cordova then `cordova` would be true, and if it was running\r\n     * from a web browser on the iPad then `mobileweb` would be `true`.\r\n     *\r\n     * ```\r\n     * import { Platform } from 'ionic-angular';\r\n     *\r\n     * @Component({...})\r\n     * export MyPage {\r\n     *   constructor(public platform: Platform) {\r\n     *     if (this.platform.is('ios')) {\r\n     *       // This will only print when on iOS\r\n     *       console.log('I am an iOS device!');\r\n     *     }\r\n     *   }\r\n     * }\r\n     * ```\r\n     *\r\n     * | Platform Name   | Description                        |\r\n     * |-----------------|------------------------------------|\r\n     * | android         | on a device running Android.       |\r\n     * | capacitor       | on a device running Capacitor.     |\r\n     * | cordova         | on a device running Cordova.       |\r\n     * | ios             | on a device running iOS.           |\r\n     * | ipad            | on an iPad device.                 |\r\n     * | iphone          | on an iPhone device.               |\r\n     * | phablet         | on a phablet device.               |\r\n     * | tablet          | on a tablet device.                |\r\n     * | electron        | in Electron on a desktop device.   |\r\n     * | pwa             | as a PWA app.                      |\r\n     * | mobile          | on a mobile device.                |\r\n     * | mobileweb       | on a mobile device in a browser.   |\r\n     * | desktop         | on a desktop device.               |\r\n     * | hybrid          | is a cordova or capacitor app.     |\r\n     *\r\n     */\r\n    is(platformName: Platforms): boolean;\r\n    /**\r\n     * @returns the array of platforms\r\n     * @description\r\n     * Depending on what device you are on, `platforms` can return multiple values.\r\n     * Each possible value is a hierarchy of platforms. For example, on an iPhone,\r\n     * it would return `mobile`, `ios`, and `iphone`.\r\n     *\r\n     * ```\r\n     * import { Platform } from 'ionic-angular';\r\n     *\r\n     * @Component({...})\r\n     * export MyPage {\r\n     *   constructor(public platform: Platform) {\r\n     *     // This will print an array of the current platforms\r\n     *     console.log(this.platform.platforms());\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    platforms(): string[];\r\n    /**\r\n     * Returns a promise when the platform is ready and native functionality\r\n     * can be called. If the app is running from within a web browser, then\r\n     * the promise will resolve when the DOM is ready. When the app is running\r\n     * from an application engine such as Cordova, then the promise will\r\n     * resolve when Cordova triggers the `deviceready` event.\r\n     *\r\n     * The resolved value is the `readySource`, which states which platform\r\n     * ready was used. For example, when Cordova is ready, the resolved ready\r\n     * source is `cordova`. The default ready source value will be `dom`. The\r\n     * `readySource` is useful if different logic should run depending on the\r\n     * platform the app is running from. For example, only Cordova can execute\r\n     * the status bar plugin, so the web should not run status bar plugin logic.\r\n     *\r\n     * ```\r\n     * import { Component } from '@angular/core';\r\n     * import { Platform } from 'ionic-angular';\r\n     *\r\n     * @Component({...})\r\n     * export MyApp {\r\n     *   constructor(public platform: Platform) {\r\n     *     this.platform.ready().then((readySource) => {\r\n     *       console.log('Platform ready from', readySource);\r\n     *       // Platform now ready, execute any required native code\r\n     *     });\r\n     *   }\r\n     * }\r\n     * ```\r\n     */\r\n    ready(): Promise<string>;\r\n    /**\r\n     * Returns if this app is using right-to-left language direction or not.\r\n     * We recommend the app's `index.html` file already has the correct `dir`\r\n     * attribute value set, such as `<html dir=\"ltr\">` or `<html dir=\"rtl\">`.\r\n     * [W3C: Structural markup and right-to-left text in HTML](http://www.w3.org/International/questions/qa-html-dir)\r\n     */\r\n    readonly isRTL: boolean;\r\n    /**\r\n     * Get the query string parameter\r\n     */\r\n    getQueryParam(key: string): string | null;\r\n    /**\r\n     * Returns `true` if the app is in landscape mode.\r\n     */\r\n    isLandscape(): boolean;\r\n    /**\r\n     * Returns `true` if the app is in portrait mode.\r\n     */\r\n    isPortrait(): boolean;\r\n    testUserAgent(expression: string): boolean;\r\n    /**\r\n     * Get the current url.\r\n     */\r\n    url(): any;\r\n    /**\r\n     * Gets the width of the platform's viewport using `window.innerWidth`.\r\n     */\r\n    width(): any;\r\n    /**\r\n     * Gets the height of the platform's viewport using `window.innerHeight`.\r\n     */\r\n    height(): number;\r\n}\r\n"]}