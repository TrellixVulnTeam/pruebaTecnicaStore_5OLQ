{"version":3,"file":"nav-controller.d.ts","sources":["nav-controller.d.ts"],"names":[],"mappingssourcesContent":["import { Location } from '@angular/common';\r\nimport { NavigationExtras, Router, UrlSerializer, UrlTree } from '@angular/router';\r\nimport { AnimationBuilder, NavDirection, RouterDirection } from '@ionic/core';\r\nimport { IonRouterOutlet } from '../directives/navigation/ion-router-outlet';\r\nimport { Platform } from './platform';\r\nexport interface AnimationOptions {\r\n    animated?: boolean;\r\n    animation?: AnimationBuilder;\r\n    animationDirection?: 'forward' | 'back';\r\n}\r\nexport interface NavigationOptions extends NavigationExtras, AnimationOptions {\r\n}\r\nexport declare class NavController {\r\n    private location;\r\n    private serializer;\r\n    private router?;\r\n    private topOutlet?;\r\n    private direction;\r\n    private animated?;\r\n    private animationBuilder?;\r\n    private guessDirection;\r\n    private guessAnimation?;\r\n    private lastNavId;\r\n    constructor(platform: Platform, location: Location, serializer: UrlSerializer, router?: Router);\r\n    /**\r\n     * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\r\n     * it's equivalent to calling `this.router.navigateByUrl()`, but it's explicit about the **direction** of the transition.\r\n     *\r\n     * Going **forward** means that a new page is going to be pushed to the stack of the outlet (ion-router-outlet),\r\n     * and that it will show a \"forward\" animation by default.\r\n     *\r\n     * Navigating forward can also be triggered in a declarative manner by using the `[routerDirection]` directive:\r\n     *\r\n     * ```html\r\n     * <a routerLink=\"/path/to/page\" routerDirection=\"forward\">Link</a>\r\n     * ```\r\n     */\r\n    navigateForward(url: string | UrlTree | any[], options?: NavigationOptions): Promise<boolean>;\r\n    /**\r\n     * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\r\n     * it's equivalent to calling:\r\n     *\r\n     * ```ts\r\n     * this.navController.setDirection('back');\r\n     * this.router.navigateByUrl(path);\r\n     * ```\r\n     *\r\n     * Going **back** means that all the pages in the stack until the navigated page is found will be popped,\r\n     * and that it will show a \"back\" animation by default.\r\n     *\r\n     * Navigating back can also be triggered in a declarative manner by using the `[routerDirection]` directive:\r\n     *\r\n     * ```html\r\n     * <a routerLink=\"/path/to/page\" routerDirection=\"back\">Link</a>\r\n     * ```\r\n     */\r\n    navigateBack(url: string | UrlTree | any[], options?: NavigationOptions): Promise<boolean>;\r\n    /**\r\n     * This method uses Angular's [Router](https://angular.io/api/router/Router) under the hood,\r\n     * it's equivalent to calling:\r\n     *\r\n     * ```ts\r\n     * this.navController.setDirection('root');\r\n     * this.router.navigateByUrl(path);\r\n     * ```\r\n     *\r\n     * Going **root** means that all existing pages in the stack will be removed,\r\n     * and the navigated page will become the single page in the stack.\r\n     *\r\n     * Navigating root can also be triggered in a declarative manner by using the `[routerDirection]` directive:\r\n     *\r\n     * ```html\r\n     * <a routerLink=\"/path/to/page\" routerDirection=\"root\">Link</a>\r\n     * ```\r\n     */\r\n    navigateRoot(url: string | UrlTree | any[], options?: NavigationOptions): Promise<boolean>;\r\n    /**\r\n     * Same as [Location](https://angular.io/api/common/Location)'s back() method.\r\n     * It will use the standard `window.history.back()` under the hood, but featuring a `back` animation\r\n     * by default.\r\n     */\r\n    back(options?: AnimationOptions): void;\r\n    /**\r\n     * This methods goes back in the context of Ionic's stack navigation.\r\n     *\r\n     * It recursively finds the top active `ion-router-outlet` and calls `pop()`.\r\n     * This is the recommended way to go back when you are using `ion-router-outlet`.\r\n     */\r\n    pop(): Promise<void>;\r\n    /**\r\n     * This methods specifies the direction of the next navigation performed by the Angular router.\r\n     *\r\n     * `setDirection()` does not trigger any transition, it just sets some flags to be consumed by `ion-router-outlet`.\r\n     *\r\n     * It's recommended to use `navigateForward()`, `navigateBack()` and `navigateRoot()` instead of `setDirection()`.\r\n     */\r\n    setDirection(direction: RouterDirection, animated?: boolean, animationDirection?: 'forward' | 'back', animationBuilder?: AnimationBuilder): void;\r\n    /**\r\n     * @internal\r\n     */\r\n    setTopOutlet(outlet: IonRouterOutlet): void;\r\n    /**\r\n     * @internal\r\n     */\r\n    consumeTransition(): {\r\n        direction: RouterDirection;\r\n        animation: NavDirection;\r\n        animationBuilder: AnimationBuilder;\r\n    };\r\n    private navigate;\r\n}\r\n"]}